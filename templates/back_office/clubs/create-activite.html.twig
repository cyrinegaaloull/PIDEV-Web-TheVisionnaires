{% extends 'back_office/base-back-office.html.twig' %}

{% block title %}Nouvelle Activité{% endblock %}

{% block body %}
<div class="container mt-5">
  <h2 class="mb-1">
    <i class="ri-calendar-event-line text-primary me-2" style="font-size: 1.7rem;"></i> Ajouter une Activité
  </h2>
  <p class="text-muted">Veuillez remplir tous les champs requis pour créer une activité.</p>

  <div id="form-messages"></div>

 {{ form_start(form, {
  'action': path('admin_activite_new'),
  'attr': {
    'enctype': 'multipart/form-data',
    'novalidate': 'novalidate',
    'id': 'activite-form',
    'class': 'ajax-form'
  }
}) }}


  <div class="row">
    {% for field in ['activitename', 'activiteimage', 'activitedescription', 'activitedate', 
                     'activitelocation', 'starttime', 'endtime', 'activitetype', 
                     'activitestatus', 'clubid'] %}
      <div class="col-md-{{ field in ['activitedescription'] ? '12' : '6' }} mb-3">
        {{ form_label(attribute(form, field)) }}
        {{ form_widget(attribute(form, field), {'attr': {'class': 'form-control'}}) }}
        <div class="invalid-feedback" data-error-for="{{ field }}"></div>
      </div>
    {% endfor %}
  </div>

  <button class="btn btn-primary mt-3"><i class="ri-check-line me-1"></i> Enregistrer</button>
  {{ form_end(form) }}
</div>

<style>
  .invalid-feedback {
    display: block;
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }

  .is-invalid {
    border-color: #dc3545;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('activite-form');

    form.addEventListener('submit', function (e) {
      e.preventDefault();

      // Clear previous errors
      document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
      document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
      const messageBox = document.getElementById('form-messages');
      messageBox.innerHTML = '';

      const formData = new FormData(form);

      fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          // Show success message
          const success = document.createElement('div');
          success.className = 'alert alert-success';
          success.innerHTML = `<i class="ri-check-line"></i> ${data.message}`;
          messageBox.appendChild(success);

          // Redirect if needed
          if (data.redirect) {
            setTimeout(() => {
              window.location.href = data.redirect;
            }, 1500);
          }
        } else {
          // Display field-specific errors
          if (data.errors) {
            for (const field in data.errors) {
              const input = form.querySelector(`[name="activite[${field}]"]`);
              const errorContainer = document.querySelector(`[data-error-for="${field}"]`);
              
              if (input) {
                input.classList.add('is-invalid');
              }
              
              if (errorContainer) {
                errorContainer.textContent = data.errors[field];
              }
            }
          }
          
          // Show general error message if needed
          if (data.message && (!data.errors || Object.keys(data.errors).length === 0)) {
            const error = document.createElement('div');
            error.className = 'alert alert-danger';
            error.innerHTML = `<i class="ri-error-warning-line"></i> ${data.message}`;
            messageBox.appendChild(error);
          }
        }
      })
      .catch(err => {
        // Handle connection errors
        const error = document.createElement('div');
        error.className = 'alert alert-danger';
        error.innerHTML = `<i class="ri-error-warning-line"></i> Une erreur est survenue lors de la communication avec le serveur.`;
        messageBox.appendChild(error);
        console.error('Fetch error:', err);
      });
    });
  });
</script>
{% endblock %}
