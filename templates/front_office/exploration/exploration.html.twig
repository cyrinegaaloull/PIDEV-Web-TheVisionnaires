{% extends 'front_office/base-front-office.html.twig' %}

{% block body %}
 <link rel="stylesheet" href="{{ asset('assets/exploration/css/style.css') }}">
{# Hero Section with Background Image #}
<div class="hero-wrap js-fullheight" style="background-image: url('{{ asset('assets/exploration/images/exploration_bg.jpeg') }}');">
  <div class="overlay"></div>
  <div class="container">
    <div class="row no-gutters slider-text js-fullheight align-items-center justify-content-center" data-scrollax-parent="true">
      <div class="col-md-9 text-center ftco-animate">
        <p class="breadcrumbs"><span class="mr-2"><a href="{{ path('app_home') }}">Home</a></span> <span>Exploration</span></p>
        <h1 class="mb-3 bread">Découvrez de nouveaux horizons</h1>
        <p class="caps">Explorez des lieux incroyables près de chez vous</p>
      </div>
    </div>
  </div>
</div>

<section class="ftco-section">
  <div class="container">
    <div class="row justify-content-center pb-4">
      <div class="col-md-12 heading-section text-center ftco-animate">
        <span class="subheading">Découverte</span>
        <h2 class="mb-4">Découvrez les lieux populaires</h2>
      </div>
    </div>
    <div class="row mb-4 align-items-center">
      <div class="col-md-8">
        <form id="live-search-form" method="get" action="{{ path('app_exploration') }}">
          <div class="input-group">
            <input
              type="text"
              name="search"
              id="search-input"
              class="form-control"
              placeholder="Rechercher un lieu..."
              autocomplete="off"
              value="{{ app.request.get('search') }}"
            >
            <div class="input-group-append">
              <button class="btn btn-primary" type="submit">Rechercher</button>
            </div>
          </div>
        </form>
      </div>
      <div class="col-md-4 text-md-right mt-3 mt-md-0 position-relative">
        <button class="btn btn-outline-secondary" id="filterToggle">
          Trier par ▼
        </button>
        <div id="filterMenu" class="dropdown-menu show" style="display: none; position: absolute; top: 100%; right: 0; z-index: 1000;">
          <a class="dropdown-item" href="#" data-filter="nearest">Le plus proche</a>
          <a class="dropdown-item" href="#" data-filter="top-rated">Les mieux notés</a>
          <a class="dropdown-item" href="#" data-filter="default">Par défaut</a>
        </div>
      </div>
    </div>
    
    <div id="lieux-results">
      {% include 'front_office/exploration/_lieux_results.html.twig' %}
    </div>
    <div id="weather-recommendations" class="mt-5 ftco-animate">
      <div class="text-center p-4" id="weather-loader">
        <div class="spinner-border text-info" role="status"></div>
        <p class="mt-2">Chargement des recommandations météo...</p>
      </div>
    </div>
</section>

<style>
  #weather-recommendations h3 {
    color: #602080;
    border-left: 4px solid #602080;
    padding-left: 10px;
  }
  
  /* Hero section styling */
  .hero-wrap {
    position: relative;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
  }
  
  .hero-wrap .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    content: '';
    opacity: .4;
    background: #000000;
  }
  
  .hero-wrap .slider-text {
    color: #fff;
    height: 650px;
  }
  
  .hero-wrap .slider-text h1 {
    font-size: 60px;
    color: #fff;
    line-height: 1.2;
    font-weight: 800;
  }
  
  .hero-wrap .slider-text p.caps {
    font-weight: 300;
    font-size: 18px;
  }
  
  .hero-wrap .breadcrumbs {
    text-transform: uppercase;
    font-size: 13px;
    letter-spacing: 1px;
    margin-bottom: 20px;
    z-index: 99;
  }
  
  .hero-wrap .breadcrumbs span {
    color: white;
  }
  
  .hero-wrap .breadcrumbs span a {
    color: white;
  }
</style>

<script>
  // Reinit animations after AJAX (FTCO-style)
  function reinitAnimations() {
      if (window.jQuery && typeof $.fn.waypoint === 'function') {
        $('.ftco-animate').waypoint(function () {
          if (!$(this.element).hasClass('ftco-animated')) {
            $(this.element).addClass('item-animate');
            setTimeout(() => {
              $('body .ftco-animate.item-animate').each(function (k) {
                const el = $(this);
                setTimeout(function () {
                  const effect = el.data('animate-effect');
                  if (effect === 'fadeIn') {
                    el.addClass('fadeIn ftco-animated');
                  } else {
                    el.addClass('fadeInUp ftco-animated');
                  }
                  el.removeClass('item-animate');
                }, k * 50, 'easeInOutExpo');
              });
            }, 100);
          }
        }, { offset: '95%' });
        $.waypoints('refresh'); //force refresh
      }
    }

document.addEventListener('DOMContentLoaded', function () {
  fetchWeatherAndLoadRecommendations();

  function fetchWeatherAndLoadRecommendations() {
    const container = document.getElementById('weather-recommendations');
    const apiKey = '6a6c2bff6bb599f64dabe16808c8cf58'; // Your OpenWeatherMap API key

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(async position => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;

        try {
          const weatherRes = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);
          const weatherData = await weatherRes.json();
          const weatherCondition = weatherData.weather[0].main;

          // Send lat/lon + weather to Symfony controller
          fetch(`/recommendations?weather=${weatherCondition}&lat=${lat}&lon=${lon}&_ajax=1`)
  .then(res => res.text())
  .then(html => {
    container.innerHTML = html;
    reinitAnimations(); // triggers FTCO animation manually
  });


        } catch (error) {
          console.error("Erreur lors de la récupération météo :", error);
          container.innerHTML = '<p class="text-muted">Impossible de charger les recommandations météo.</p>';
        }
      }, error => {
        console.error("Erreur de géolocalisation :", error);
        container.innerHTML = '<p class="text-muted">Géolocalisation désactivée. Aucune recommandation météo possible.</p>';
      });
    } else {
      container.innerHTML = '<p class="text-muted">Géolocalisation non supportée par votre navigateur.</p>';
    }
  }
});


  document.addEventListener('DOMContentLoaded', function () {
    const filterToggle = document.getElementById('filterToggle');
    const filterMenu = document.getElementById('filterMenu');
    const resultsContainer = document.getElementById('lieux-results');

    // Toggle dropdown
    filterToggle.addEventListener('click', () => {
      filterMenu.style.display = filterMenu.style.display === 'none' ? 'block' : 'none';
    });

    // Click outside to close dropdown
    document.addEventListener('click', function (e) {
      if (!filterMenu.contains(e.target) && !filterToggle.contains(e.target)) {
        filterMenu.style.display = 'none';
      }
    });

    
    // AJAX loader template
    function showLoader() {
      resultsContainer.innerHTML = `
        <div class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Chargement...</span>
          </div>
        </div>`;
    }

    // Fetch and inject lieux
    function loadLieux(url) {
      showLoader();

      fetch(url, {
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      })
      .then(res => res.text())
      .then(html => {
        resultsContainer.innerHTML = html;
        console.log('HTML injected from URL:', url);
        console.log(resultsContainer.innerHTML);

        reinitAnimations();
        window.dispatchEvent(new Event('resize')); // fix layout issues
        window.history.pushState({}, '', url); // update URL
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }

    // Handle filter dropdown click
    document.querySelectorAll('.dropdown-item').forEach(item => {
      item.addEventListener('click', function (e) {
        e.preventDefault();
        const filter = this.dataset.filter;
        let url = '/exploration';

        document.querySelectorAll('.dropdown-item').forEach(item => {
  item.addEventListener('click', function (e) {
    e.preventDefault();
    const filter = this.dataset.filter;
    let url = '/exploration';

    if (filter === 'nearest') {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          const lat = position.coords.latitude;
          const lon = position.coords.longitude;
          url = `/exploration?filter=nearest&lat=${lat}&lon=${lon}&_ajax=1`;
          loadLieux(url);
        });
      } else {
        alert('La géolocalisation est désactivée.');
      }
    } else if (filter === 'top-rated') {
      url = `/exploration?filter=top-rated&_ajax=1`;
      loadLieux(url);
    } else {
      url = `/exploration?_ajax=1`;
      loadLieux(url);
    }

    filterMenu.style.display = 'none';
  });
});


        filterMenu.style.display = 'none';
      });
    });

    // Handle favorite toggle
    document.addEventListener('click', function (e) {
      const target = e.target.closest('.favorite-toggle');
      if (!target) return;

      const id = target.dataset.id;

      fetch(`/toggle-favorite/${id}`, {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(res => res.json())
      .then(() => {
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.set('_ajax', '1');
        loadLieux(currentUrl.toString());
      });
    });
  });
  

</script>
{% endblock %}