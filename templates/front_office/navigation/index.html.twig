{# templates/front_office/navigation/index.html.twig #}
{% extends 'front_office/base-front-office.html.twig' %}

{% block title %}Navigation - Local Lens{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
  <style>
    #map { 
      height: 500px; 
      width: 100%;
      border-radius: 8px;
    }
    .location-suggestions {
      position: absolute;
      z-index: 1000;
      background: white;
      width: 100%;
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #ced4da;
      border-radius: 0.25rem;
      display: none;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .suggestion-item {
      padding: 8px 10px;
      cursor: pointer;
    }
    .suggestion-item:hover {
      background-color: #f8f9fa;
    }
    .loading-spinner {
      display: none;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1000;
      background-color: rgba(255, 255, 255, 0.7);
      padding: 20px;
      border-radius: 10px;
    }
    .btn-primary {
      background-color: #f15d30 !important;
      border-color: #f15d30 !important;
    }
    .btn-outline-secondary {
      color: #6c757d;
      border-color: #6c757d;
    }
    .btn-outline-secondary:hover {
      background-color: #6c757d;
      color: white;
    }
    .card {
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      margin-bottom: 20px;
    }
    .card-header {
      background-color: #f8f9fa;
      font-weight: bold;
    }
  </style>
{% endblock %}

{% block body %}
<div class="hero-wrap js-fullheight" style="background-image: url('{{ asset('assets/front_office/images/bg_5.jpg') }}'); height: 300px !important;" data-stellar-background-ratio="0.5">
  <div class="overlay"></div>
  <div class="container">
    <div class="row no-gutters slider-text js-fullheight align-items-center justify-content-center" data-scrollax-parent="true" style="height: 300px !important;">
      <div class="col-md-9 text text-center ftco-animate" data-scrollax=" properties: { translateY: '70%' }">
        <h1 data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">Navigation</h1>
        <p class="caps" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">Trouvez le meilleur itinéraire pour vous déplacer dans la ville</p>
      </div>
    </div>
  </div>
</div>

<section class="ftco-section ftco-no-pb ftco-no-pt">
  <div class="container">
    <div class="row">
      <div class="col-md-4">
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-white">
            <h5 class="card-title mb-0">Itinéraire</h5>
          </div>
          <div class="card-body">
            <form id="routeForm">
              <!-- Departure Location -->
              <div class="mb-3">
                <label for="departurePlaceField" class="form-label">Départ</label>
                <div class="input-group">
                  <input type="text" class="form-control" id="departurePlaceField" placeholder="Entrer lieu de départ">
                  <button class="btn btn-outline-secondary" type="button" id="currentLocationButton">
                    <i class="fa fa-map-marker"></i> Position
                  </button>
                </div>
                <div class="location-suggestions" id="departureSuggestions"></div>
                <div class="row mt-2">
                  <div class="col">
                    <input type="text" class="form-control form-control-sm" id="departureLatField" placeholder="Latitude" readonly>
                  </div>
                  <div class="col">
                    <input type="text" class="form-control form-control-sm" id="departureLonField" placeholder="Longitude" readonly>
                  </div>
                </div>
              </div>

              <!-- Arrival Location -->
              <div class="mb-3">
                <label for="arrivalPlaceField" class="form-label">Arrivée</label>
                <input type="text" class="form-control" id="arrivalPlaceField" placeholder="Entrer lieu d'arrivée">
                <div class="location-suggestions" id="arrivalSuggestions"></div>
                <div class="row mt-2">
                  <div class="col">
                    <input type="text" class="form-control form-control-sm" id="arrivalLatField" placeholder="Latitude" readonly>
                  </div>
                  <div class="col">
                    <input type="text" class="form-control form-control-sm" id="arrivalLonField" placeholder="Longitude" readonly>
                  </div>
                </div>
              </div>

              <div class="mb-3">
                <button type="button" class="btn btn-outline-secondary btn-sm" id="swapLocationsButton">
                  <i class="fa fa-exchange"></i> Inverser les lieux
                </button>
              </div>

              <!-- Transport Mode -->
              <div class="mb-3">
                <label for="transportModeComboBox" class="form-label">Mode de transport</label>
                <select class="form-select form-control" id="transportModeComboBox">
                  {% for mode in transportModes %}
                    <option value="{{ mode.name }}">{{ mode.name }}</option>
                  {% endfor %}
                </select>
              </div>

              <!-- Date and Time (for public transport) -->
              <div class="mb-3" id="dateTimeSection" style="display: none;">
                <label class="form-label">Date & Heure de départ</label>
                <div class="row">
                  <div class="col">
                    <input type="date" class="form-control" id="departureDatePicker">
                  </div>
                  <div class="col">
                    <select class="form-select form-control" id="departureTimeComboBox">
                      {% for h in 0..23 %}
                        <option value="{{ h|format('%02d') }}:00">{{ h|format('%02d') }}:00</option>
                      {% endfor %}
                    </select>
                  </div>
                </div>
              </div>

              <!-- Route Name -->
              <div class="mb-3">
                <label for="routeNameField" class="form-label">Nom de l'itinéraire (pour enregistrement)</label>
                <input type="text" class="form-control" id="routeNameField" placeholder="Optionnel">
              </div>

              <!-- Buttons -->
              <div class="d-grid gap-2">
                <button type="button" class="btn btn-primary" id="showRouteButton" disabled>
                  Afficher l'itinéraire
                </button>
                <button type="button" class="btn btn-outline-secondary" id="clearRouteButton">
                  Effacer
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Saved Routes -->
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-white">
            <h5 class="card-title mb-0">Itinéraires enregistrés</h5>
          </div>
          <div class="card-body">
            <select class="form-select form-control mb-2" id="savedRoutesComboBox">
              <option value="">Sélectionner un itinéraire</option>
              {% for route in savedRoutes %}
                <option value="{{ route.id }}">{{ route.name }}</option>
              {% endfor %}
            </select>
            <button type="button" class="btn btn-outline-danger btn-sm" id="deleteRouteButton">
              Supprimer
            </button>
          </div>
        </div>
      </div>

      <div class="col-md-8">
        <!-- Map and Route Information -->
        <div class="card shadow-sm mb-4">
          <div class="card-header bg-white">
            <h5 class="card-title mb-0">Carte d'itinéraire</h5>
          </div>
          <div class="card-body">
            <div id="map"></div>
            <div class="mt-3">
              <div class="alert alert-info" id="arrivalTimeLabel">
                Les informations sur l'itinéraire apparaîtront ici
              </div>
            </div>
            
            <!-- Loading Spinner -->
            <div class="text-center loading-spinner" id="progressIndicator">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
              </div>
            </div>

            <!-- Public Transport Options -->
            <div id="publicTransportOptionsPanel" style="display: none;" class="mt-3">
              <h5>Options de transport public</h5>
              <select class="form-select form-control mb-2" id="publicTransportComboBox">
                <option value="">Chargement des options...</option>
              </select>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <script>
    // Initialize map when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize the map
      const map = L.map('map').setView([36.8065, 10.1815], 13); // Centered on Tunis
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Global variables for map markers and routes
      let markers = [];
      let routeLines = [];
      
      // Function to clear existing route
      function clearRoute() {
        // Remove markers
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
        
        // Remove route lines
        routeLines.forEach(line => map.removeLayer(line));
        routeLines = [];
      }
      
      // Function to decode Google polyline
      function decodePolyline(encoded) {
        if (!encoded || encoded.length === 0) return [];
        
        let poly = [];
        let index = 0, len = encoded.length;
        let lat = 0, lng = 0;
        
        while (index < len) {
          let b, shift = 0, result = 0;
          
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          
          let dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
          lat += dlat;
          
          shift = 0;
          result = 0;
          
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          
          let dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
          lng += dlng;
          
          poly.push([lat * 1e-5, lng * 1e-5]);
        }
        
        return poly;
      }

      // Include the rest of the JavaScript for map functionality, location search, routing, etc.
      // This will be similar to the code you provided in your route_finder/index.html.twig template,
      // but with URLs adjusted to match the new routes and some French translations.
      
      // Function to show route on map
      function showRoute(depLat, depLon, arrLat, arrLon, transportMode) {
        clearRoute();
        
        // Create markers for start and end points
        const startMarker = L.marker([depLat, depLon])
          .bindPopup('Départ<br>Lat: ' + depLat + '<br>Lon: ' + depLon)
          .addTo(map);
          
        const endMarker = L.marker([arrLat, arrLon])
          .bindPopup('Arrivée<br>Lat: ' + arrLat + '<br>Lon: ' + arrLon)
          .addTo(map);
          
        markers.push(startMarker, endMarker);
        
        // Choose color based on transport mode
        const colors = {
          'driving': '#4CAF50',
          'walking': '#2196F3',
          'cycling': '#FF9800',
          'public_transport': '#9C27B0'
        };
        
        const color = colors[transportMode] || '#4CAF50';
        
        // Create a line between the points
        const routeLine = L.polyline([[depLat, depLon], [arrLat, arrLon]], {
          color: color,
          weight: 5,
          opacity: 0.7
        }).addTo(map);
        
        routeLines.push(routeLine);
        
        // Fit the map to show the entire route
        map.fitBounds(routeLine.getBounds(), {
          padding: [50, 50]
        });
      }
      
      // Initialize the rest of JavaScript functionality here
      // (location search, calculate route, etc.)
    });
  </script>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <script>
    // Initialize map when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize the map
      const map = L.map('map').setView([36.8065, 10.1815], 13); // Centered on Tunis
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Global variables for map markers and routes
      let markers = [];
      let routeLines = [];
      
      // Function to clear existing route
      function clearRoute() {
        // Remove markers
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
        
        // Remove route lines
        routeLines.forEach(line => map.removeLayer(line));
        routeLines = [];
      }
      
      // Function to decode Google polyline
      function decodePolyline(encoded) {
        if (!encoded || encoded.length === 0) return [];
        
        let poly = [];
        let index = 0, len = encoded.length;
        let lat = 0, lng = 0;
        
        while (index < len) {
          let b, shift = 0, result = 0;
          
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          
          let dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
          lat += dlat;
          
          shift = 0;
          result = 0;
          
          do {
            b = encoded.charCodeAt(index++) - 63;
            result |= (b & 0x1f) << shift;
            shift += 5;
          } while (b >= 0x20);
          
          let dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
          lng += dlng;
          
          poly.push([lat * 1e-5, lng * 1e-5]);
        }
        
        return poly;
      }

      // Include the rest of the JavaScript for map functionality, location search, routing, etc.
      // This will be similar to the code you provided in your route_finder/index.html.twig template,
      // but with URLs adjusted to match the new routes and some French translations.
      
      // Function to show route on map
      function showRoute(depLat, depLon, arrLat, arrLon, transportMode) {
        clearRoute();
        
        // Create markers for start and end points
        const startMarker = L.marker([depLat, depLon])
          .bindPopup('Départ<br>Lat: ' + depLat + '<br>Lon: ' + depLon)
          .addTo(map);
          
        const endMarker = L.marker([arrLat, arrLon])
          .bindPopup('Arrivée<br>Lat: ' + arrLat + '<br>Lon: ' + arrLon)
          .addTo(map);
          
        markers.push(startMarker, endMarker);
        
        // Choose color based on transport mode
        const colors = {
          'driving': '#4CAF50',
          'walking': '#2196F3',
          'cycling': '#FF9800',
          'public_transport': '#9C27B0'
        };
        
        const color = colors[transportMode] || '#4CAF50';
        
        // Create a line between the points
        const routeLine = L.polyline([[depLat, depLon], [arrLat, arrLon]], {
          color: color,
          weight: 5,
          opacity: 0.7
        }).addTo(map);
        
        routeLines.push(routeLine);
        
        // Fit the map to show the entire route
        map.fitBounds(routeLine.getBounds(), {
          padding: [50, 50]
        });
      }
      
      // Initialize the rest of JavaScript functionality here
      // (location search, calculate route, etc.)
    });
  </script>
{% endblock %}